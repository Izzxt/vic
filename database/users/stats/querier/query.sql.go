// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package users_stats

import (
	"context"
	"database/sql"
)

const GetUserStats = `-- name: GetUserStats :one
SELECT id, user_id, bubble_chat_id FROM users_stats
WHERE user_id = ?
`

func (q *Queries) GetUserStats(ctx context.Context, userID int32) (UsersStat, error) {
	row := q.db.QueryRowContext(ctx, GetUserStats, userID)
	var i UsersStat
	err := row.Scan(&i.ID, &i.UserID, &i.BubbleChatID)
	return i, err
}

const InsertUserStats = `-- name: InsertUserStats :execresult
INSERT INTO users_stats (
  user_id
) VALUES (
  ?
)
`

func (q *Queries) InsertUserStats(ctx context.Context, userID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, InsertUserStats, userID)
}

const ListUserStats = `-- name: ListUserStats :many
SELECT id, user_id, bubble_chat_id FROM users_stats
ORDER BY id
`

func (q *Queries) ListUserStats(ctx context.Context) ([]UsersStat, error) {
	rows, err := q.db.QueryContext(ctx, ListUserStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UsersStat{}
	for rows.Next() {
		var i UsersStat
		if err := rows.Scan(&i.ID, &i.UserID, &i.BubbleChatID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBubbleChat = `-- name: UpdateBubbleChat :exec
UPDATE users_stats SET bubble_chat_id = ?
WHERE user_id = ?
`

type UpdateBubbleChatParams struct {
	BubbleChatID sql.NullInt32 `json:"bubble_chat_id"`
	UserID       int32         `json:"user_id"`
}

func (q *Queries) UpdateBubbleChat(ctx context.Context, arg UpdateBubbleChatParams) error {
	_, err := q.db.ExecContext(ctx, UpdateBubbleChat, arg.BubbleChatID, arg.UserID)
	return err
}
