// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package users

import (
	"context"
)

const GetUserByAuthTicket = `-- name: GetUserByAuthTicket :one
SELECT id, username, password, auth_ticket, email, rank_id, account_created_date, last_online_date, is_online, motto, look, gender, ip_register, ip_current, home_room FROM users
WHERE auth_ticket = ?
`

func (q *Queries) GetUserByAuthTicket(ctx context.Context, authTicket string) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByAuthTicket, authTicket)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.AuthTicket,
		&i.Email,
		&i.RankID,
		&i.AccountCreatedDate,
		&i.LastOnlineDate,
		&i.IsOnline,
		&i.Motto,
		&i.Look,
		&i.Gender,
		&i.IpRegister,
		&i.IpCurrent,
		&i.HomeRoom,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, username, password, auth_ticket, email, rank_id, account_created_date, last_online_date, is_online, motto, look, gender, ip_register, ip_current, home_room FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.AuthTicket,
			&i.Email,
			&i.RankID,
			&i.AccountCreatedDate,
			&i.LastOnlineDate,
			&i.IsOnline,
			&i.Motto,
			&i.Look,
			&i.Gender,
			&i.IpRegister,
			&i.IpCurrent,
			&i.HomeRoom,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
