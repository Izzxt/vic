// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package room_info

import (
	"context"
)

const GetRoomById = `-- name: GetRoomById :one
SELECT id, owner_id, name, description, model_id, password, state, users, max_users, flat_category_id, score, floorpaper, wallpaper, landscape, wall_thickness, wall_height, floor_thickness, tags, is_public, is_staff_picked, allow_other_pets, allow_other_pets_eat, allow_walkthrough, is_wall_hidden, chat_mode, chat_weight, chat_scrolling_speed, chat_hearing_distance, chat_protection, who_can_mute, who_can_kick, who_can_ban, roller_speed, is_promoted, trade_mode, move_diagonal, is_wired_hidden, is_forsale FROM rooms
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRoomById(ctx context.Context, id int32) (Room, error) {
	row := q.db.QueryRowContext(ctx, GetRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.ModelID,
		&i.Password,
		&i.State,
		&i.Users,
		&i.MaxUsers,
		&i.FlatCategoryID,
		&i.Score,
		&i.Floorpaper,
		&i.Wallpaper,
		&i.Landscape,
		&i.WallThickness,
		&i.WallHeight,
		&i.FloorThickness,
		&i.Tags,
		&i.IsPublic,
		&i.IsStaffPicked,
		&i.AllowOtherPets,
		&i.AllowOtherPetsEat,
		&i.AllowWalkthrough,
		&i.IsWallHidden,
		&i.ChatMode,
		&i.ChatWeight,
		&i.ChatScrollingSpeed,
		&i.ChatHearingDistance,
		&i.ChatProtection,
		&i.WhoCanMute,
		&i.WhoCanKick,
		&i.WhoCanBan,
		&i.RollerSpeed,
		&i.IsPromoted,
		&i.TradeMode,
		&i.MoveDiagonal,
		&i.IsWiredHidden,
		&i.IsForsale,
	)
	return i, err
}

const ListRooms = `-- name: ListRooms :many
SELECT id, owner_id, name, description, model_id, password, state, users, max_users, flat_category_id, score, floorpaper, wallpaper, landscape, wall_thickness, wall_height, floor_thickness, tags, is_public, is_staff_picked, allow_other_pets, allow_other_pets_eat, allow_walkthrough, is_wall_hidden, chat_mode, chat_weight, chat_scrolling_speed, chat_hearing_distance, chat_protection, who_can_mute, who_can_kick, who_can_ban, roller_speed, is_promoted, trade_mode, move_diagonal, is_wired_hidden, is_forsale FROM rooms
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, ListRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.ModelID,
			&i.Password,
			&i.State,
			&i.Users,
			&i.MaxUsers,
			&i.FlatCategoryID,
			&i.Score,
			&i.Floorpaper,
			&i.Wallpaper,
			&i.Landscape,
			&i.WallThickness,
			&i.WallHeight,
			&i.FloorThickness,
			&i.Tags,
			&i.IsPublic,
			&i.IsStaffPicked,
			&i.AllowOtherPets,
			&i.AllowOtherPetsEat,
			&i.AllowWalkthrough,
			&i.IsWallHidden,
			&i.ChatMode,
			&i.ChatWeight,
			&i.ChatScrollingSpeed,
			&i.ChatHearingDistance,
			&i.ChatProtection,
			&i.WhoCanMute,
			&i.WhoCanKick,
			&i.WhoCanBan,
			&i.RollerSpeed,
			&i.IsPromoted,
			&i.TradeMode,
			&i.MoveDiagonal,
			&i.IsWiredHidden,
			&i.IsForsale,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
