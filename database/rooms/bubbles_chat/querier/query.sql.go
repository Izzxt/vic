// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package bubbles_chat

import (
	"context"
)

const GetBubbleChatById = `-- name: GetBubbleChatById :one
SELECT id, ` + "`" + `key` + "`" + `, is_ambassador, is_overrideable, trigger_talking_furniture FROM bubbles_chat
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBubbleChatById(ctx context.Context, id int32) (BubblesChat, error) {
	row := q.db.QueryRowContext(ctx, GetBubbleChatById, id)
	var i BubblesChat
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.IsAmbassador,
		&i.IsOverrideable,
		&i.TriggerTalkingFurniture,
	)
	return i, err
}

const GetBubbleChatByKey = `-- name: GetBubbleChatByKey :one
SELECT id, ` + "`" + `key` + "`" + `, is_ambassador, is_overrideable, trigger_talking_furniture FROM bubbles_chat
WHERE ` + "`" + `key` + "`" + ` = ? LIMIT 1
`

func (q *Queries) GetBubbleChatByKey(ctx context.Context, key string) (BubblesChat, error) {
	row := q.db.QueryRowContext(ctx, GetBubbleChatByKey, key)
	var i BubblesChat
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.IsAmbassador,
		&i.IsOverrideable,
		&i.TriggerTalkingFurniture,
	)
	return i, err
}

const ListsBubbleChat = `-- name: ListsBubbleChat :many
SELECT id, ` + "`" + `key` + "`" + `, is_ambassador, is_overrideable, trigger_talking_furniture FROM bubbles_chat
ORDER BY id
`

func (q *Queries) ListsBubbleChat(ctx context.Context) ([]BubblesChat, error) {
	rows, err := q.db.QueryContext(ctx, ListsBubbleChat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BubblesChat{}
	for rows.Next() {
		var i BubblesChat
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.IsAmbassador,
			&i.IsOverrideable,
			&i.TriggerTalkingFurniture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
