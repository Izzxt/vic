// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package room_models

import (
	"context"
)

const GetModelById = `-- name: GetModelById :one
SELECT id, name, heightmap, is_club, is_custom, x, y, dir FROM room_models
WHERE id = ?
`

func (q *Queries) GetModelById(ctx context.Context, id int32) (RoomModel, error) {
	row := q.db.QueryRowContext(ctx, GetModelById, id)
	var i RoomModel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Heightmap,
		&i.IsClub,
		&i.IsCustom,
		&i.X,
		&i.Y,
		&i.Dir,
	)
	return i, err
}

const GetModelByName = `-- name: GetModelByName :one
SELECT id, name, heightmap, is_club, is_custom, x, y, dir FROM room_models
WHERE name = ?
`

func (q *Queries) GetModelByName(ctx context.Context, name string) (RoomModel, error) {
	row := q.db.QueryRowContext(ctx, GetModelByName, name)
	var i RoomModel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Heightmap,
		&i.IsClub,
		&i.IsCustom,
		&i.X,
		&i.Y,
		&i.Dir,
	)
	return i, err
}

const ListRoomModels = `-- name: ListRoomModels :many
SELECT id, name, heightmap, is_club, is_custom, x, y, dir FROM room_models
`

func (q *Queries) ListRoomModels(ctx context.Context) ([]RoomModel, error) {
	rows, err := q.db.QueryContext(ctx, ListRoomModels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoomModel{}
	for rows.Next() {
		var i RoomModel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Heightmap,
			&i.IsClub,
			&i.IsCustom,
			&i.X,
			&i.Y,
			&i.Dir,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
